// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/liqbot/bot/normal (interfaces: Node)

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	api "github.com/vegaprotocol/api/grpc/clients/go/generated/code.vegaprotocol.io/vega/proto/api"
)

// MockNode is a mock of Node interface.
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *MockNodeMockRecorder
}

// MockNodeMockRecorder is the mock recorder for MockNode.
type MockNodeMockRecorder struct {
	mock *MockNode
}

// NewMockNode creates a new mock instance.
func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &MockNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNode) EXPECT() *MockNodeMockRecorder {
	return m.recorder
}

// AssetByID mocks base method.
func (m *MockNode) AssetByID(arg0 string) (*api.AssetByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssetByID", arg0)
	ret0, _ := ret[0].(*api.AssetByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssetByID indicates an expected call of AssetByID.
func (mr *MockNodeMockRecorder) AssetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssetByID", reflect.TypeOf((*MockNode)(nil).AssetByID), arg0)
}

// GetAddress mocks base method.
func (m *MockNode) GetAddress() (url.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(url.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockNodeMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockNode)(nil).GetAddress))
}

// GetVegaTime mocks base method.
func (m *MockNode) GetVegaTime() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVegaTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVegaTime indicates an expected call of GetVegaTime.
func (mr *MockNodeMockRecorder) GetVegaTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVegaTime", reflect.TypeOf((*MockNode)(nil).GetVegaTime))
}

// LastBlockHeight mocks base method.
func (m *MockNode) LastBlockHeight(arg0 *api.LastBlockHeightRequest) (*api.LastBlockHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastBlockHeight", arg0)
	ret0, _ := ret[0].(*api.LastBlockHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastBlockHeight indicates an expected call of LastBlockHeight.
func (mr *MockNodeMockRecorder) LastBlockHeight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastBlockHeight", reflect.TypeOf((*MockNode)(nil).LastBlockHeight), arg0)
}

// LiquidityProvisions mocks base method.
func (m *MockNode) LiquidityProvisions(arg0 *api.LiquidityProvisionsRequest) (*api.LiquidityProvisionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LiquidityProvisions", arg0)
	ret0, _ := ret[0].(*api.LiquidityProvisionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LiquidityProvisions indicates an expected call of LiquidityProvisions.
func (mr *MockNodeMockRecorder) LiquidityProvisions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LiquidityProvisions", reflect.TypeOf((*MockNode)(nil).LiquidityProvisions), arg0)
}

// MarketByID mocks base method.
func (m *MockNode) MarketByID(arg0 *api.MarketByIDRequest) (*api.MarketByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketByID", arg0)
	ret0, _ := ret[0].(*api.MarketByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketByID indicates an expected call of MarketByID.
func (mr *MockNodeMockRecorder) MarketByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketByID", reflect.TypeOf((*MockNode)(nil).MarketByID), arg0)
}

// MarketDataByID mocks base method.
func (m *MockNode) MarketDataByID(arg0 *api.MarketDataByIDRequest) (*api.MarketDataByIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketDataByID", arg0)
	ret0, _ := ret[0].(*api.MarketDataByIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarketDataByID indicates an expected call of MarketDataByID.
func (mr *MockNodeMockRecorder) MarketDataByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketDataByID", reflect.TypeOf((*MockNode)(nil).MarketDataByID), arg0)
}

// Markets mocks base method.
func (m *MockNode) Markets(arg0 *api.MarketsRequest) (*api.MarketsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Markets", arg0)
	ret0, _ := ret[0].(*api.MarketsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Markets indicates an expected call of Markets.
func (mr *MockNodeMockRecorder) Markets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Markets", reflect.TypeOf((*MockNode)(nil).Markets), arg0)
}

// ObserveEventBus mocks base method.
func (m *MockNode) ObserveEventBus() (api.TradingDataService_ObserveEventBusClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObserveEventBus")
	ret0, _ := ret[0].(api.TradingDataService_ObserveEventBusClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObserveEventBus indicates an expected call of ObserveEventBus.
func (mr *MockNodeMockRecorder) ObserveEventBus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveEventBus", reflect.TypeOf((*MockNode)(nil).ObserveEventBus))
}

// PartyAccounts mocks base method.
func (m *MockNode) PartyAccounts(arg0 *api.PartyAccountsRequest) (*api.PartyAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartyAccounts", arg0)
	ret0, _ := ret[0].(*api.PartyAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartyAccounts indicates an expected call of PartyAccounts.
func (mr *MockNodeMockRecorder) PartyAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyAccounts", reflect.TypeOf((*MockNode)(nil).PartyAccounts), arg0)
}

// PositionsByParty mocks base method.
func (m *MockNode) PositionsByParty(arg0 *api.PositionsByPartyRequest) (*api.PositionsByPartyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionsByParty", arg0)
	ret0, _ := ret[0].(*api.PositionsByPartyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsByParty indicates an expected call of PositionsByParty.
func (mr *MockNodeMockRecorder) PositionsByParty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsByParty", reflect.TypeOf((*MockNode)(nil).PositionsByParty), arg0)
}

// PositionsSubscribe mocks base method.
func (m *MockNode) PositionsSubscribe(arg0 *api.PositionsSubscribeRequest) (api.TradingDataService_PositionsSubscribeClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PositionsSubscribe", arg0)
	ret0, _ := ret[0].(api.TradingDataService_PositionsSubscribeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PositionsSubscribe indicates an expected call of PositionsSubscribe.
func (mr *MockNodeMockRecorder) PositionsSubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PositionsSubscribe", reflect.TypeOf((*MockNode)(nil).PositionsSubscribe), arg0)
}

// SubmitTransactionV2 mocks base method.
func (m *MockNode) SubmitTransactionV2(arg0 *api.SubmitTransactionV2Request) (*api.SubmitTransactionV2Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransactionV2", arg0)
	ret0, _ := ret[0].(*api.SubmitTransactionV2Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransactionV2 indicates an expected call of SubmitTransactionV2.
func (mr *MockNodeMockRecorder) SubmitTransactionV2(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransactionV2", reflect.TypeOf((*MockNode)(nil).SubmitTransactionV2), arg0)
}
